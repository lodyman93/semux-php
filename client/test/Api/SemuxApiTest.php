<?php
/**
 * SemuxApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Semux API
 *
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Semux\Client;

use Semux\Client\Api\SemuxApi;
use \Semux\Client\Configuration;
use \Semux\Client\ApiException;
use Semux\Client\Model\BlockType;
use \Semux\Client\ObjectSerializer;
use DateTime;

/**
 * SemuxApiTest Class Doc Comment
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SemuxApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var SemuxApi
     */
    private $api;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
        $config = new Configuration();
        $config->setHost("http://0.0.0.0:5171/v2.1.0")->setUsername("user")->setPassword("pass");
        $this->api = new SemuxApi(new \GuzzleHttp\Client(), $config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addNode
     *
     * Add node.
     */
    public function testAddNode()
    {
        $response = $this->api->addNode("1.1.1.1:5161");
        $this->assertTrue($response->getSuccess());
    }

    /**
     * Test case for addToBlacklist
     *
     * Add to blacklist.
     */
    public function testAddToBlacklist()
    {
        $response = $this->api->addToBlacklist("1.1.1.1");
        $this->assertTrue($response->getSuccess());
    }

    /**
     * Test case for addToWhitelist
     *
     * Add to whitelist.
     */
    public function testAddToWhitelist()
    {
        $response = $this->api->addToWhitelist("1.1.1.1");
        $this->assertTrue($response->getSuccess());
    }

    /**
     * Test case for broadcastRawTransaction
     *
     * Broadcast a raw transaction.
     */
    public function testBroadcastRawTransaction()
    {
    }

    /**
     * Test case for composeRawTransaction
     *
     * Compose an unsigned raw transaction.
     */
    public function testComposeRawTransaction()
    {
        $response = $this->api->composeRawTransaction(
            "MAINNET",
            "TRANSFER",
            0.005 * SEM,
            1,
            DEVNET_VALIDATOR,
            1 * SEM,
            1526365454 * 1000,
            null
        );
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(
            RAW_TX,
            $response->getResult()
        );
    }

    /**
     * Test case for createAccount
     *
     * Create account.
     */
    public function testCreateAccount()
    {
        $response = $this->api->createAccount();
        $this->assertTrue($response->getSuccess());
        $this->assertRegExp("%^0x[0-9a-f]{40}$%", $response->getResult());
    }

    /**
     * Test case for createAccount with privateKey
     */
    public function testCreateAccountWithPrivateKey()
    {
        $response = $this->api->createAccount(null, "302e020100300506032b6570042204202c0ef9b2d169bf52333bf4f4ec00f429515a4ccc555245fe5242e83667c9a5e1");
        $this->assertTrue($response->getSuccess());
        $this->assertEquals("0x56ac912151f811714b3833c81997d0286fc5c5f7", $response->getResult());
    }

    /**
     * Test case for deleteAccount
     */
    public function testDeleteAccount() {
        $createAccountResponse = $this->api->createAccount();
        $this->assertTrue($createAccountResponse->getSuccess());

        $deleteAccountResponse = $this->api->deleteAccount($createAccountResponse->getResult());
        $this->assertTrue($deleteAccountResponse->getSuccess());

        $listAccountsResponse = $this->api->listAccounts();
        $this->assertTrue($listAccountsResponse->getSuccess());
        $this->assertNotContains($createAccountResponse->getResult(), $listAccountsResponse->getResult());
    }

    /**
     * Test case for getAccount
     *
     * Get account.
     */
    public function testGetAccount()
    {
        $response = $this->api->getAccount(DEVNET_VALIDATOR);
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(DEVNET_VALIDATOR, $response->getResult()->getAddress());
    }

    /**
     * Test case for getAccountTransactions
     *
     * Get account transactions.
     */
    public function testGetAccountTransactions()
    {
        $response = $this->api->getAccountTransactions("0x0123456789012345678901234567890123456789", 0, 100);
        $this->assertTrue($response->getSuccess());
        $this->assertInternalType("array", $response->getResult());
    }

    /**
     * Test case for getAccountPendingTransactions
     */
    public function testGetAccountPendingTransactions() {
        $transferResponse = $this->api->transfer(DEVNET_VALIDATOR, DEVNET_VALIDATOR, 1);
        $this->assertTrue($transferResponse->getSuccess());

        $pendingTxResponse = $this->api->getAccountPendingTransactions(DEVNET_VALIDATOR, 0, 100);
        $this->assertNotEmpty($pendingTxResponse->getResult());
        $this->assertEquals($transferResponse->getResult(), $pendingTxResponse->getResult()[sizeof($pendingTxResponse->getResult()) - 1]->getHash());
    }

    /**
     * Test case for getAccountVotes
     */
    public function testGetAccountVotes() {
        $response = $this->api->getAccountVotes(DEVNET_VALIDATOR);
        $this->assertTrue($response->getSuccess());
        $this->assertNotEmpty($response->getResult());

        $this->assertEquals(DEVNET_VALIDATOR, $response->getResult()[0]->getDelegate()->getAddress());
        $this->assertEquals(1 * 1e9, $response->getResult()[0]->getVotes());

        $this->assertEquals(DEVNET_DELEGATE, $response->getResult()[1]->getDelegate()->getAddress());
        $this->assertEquals(1 * 1e9, $response->getResult()[1]->getVotes());
    }

    /**
     * Test case for getBlockByHash
     *
     * Get block by hash.
     */
    public function testGetBlockByHash()
    {
        $response = $this->api->getBlockByHash(DEVNET_GENESIS_HASH);
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(0, $response->getResult()->getNumber());
        $this->assertEquals("2017-09-07T00:00:00+0000", (new \DateTime())->setTimestamp($response->getResult()->getTimestamp() / 1000)->format(DATE_ISO8601));
    }

    /**
     * Test case for getBlockByNumber
     *
     * Get block by number.
     */
    public function testGetBlockByNumber()
    {
        $response = $this->api->getBlockByNumber(0);
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(DEVNET_GENESIS_HASH, $response->getResult()->getHash());
    }

    /**
     * Test case for getDelegate
     *
     * Get a delegate.
     */
    public function testGetDelegate()
    {
        $response = $this->api->getDelegate(DEVNET_VALIDATOR);
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(DEVNET_VALIDATOR, $response->getResult()->getAddress());
    }

    /**
     * Test case for getDelegates
     *
     * Get all delegates.
     */
    public function testGetDelegates()
    {
        $response = $this->api->getDelegates();
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(DEVNET_VALIDATOR, $response->getResult()[0]->getAddress());
    }

    /**
     * Test case for getInfo
     *
     * Get info.
     */
    public function testGetInfo()
    {
        $response = $this->api->getInfo();
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(DEVNET_VALIDATOR, $response->getResult()->getCoinbase());
    }

    /**
     * Test case for getLatestBlock
     *
     * Get latest block.
     */
    public function testGetLatestBlock()
    {
        $response = $this->api->getLatestBlock();
        $this->assertTrue($response->getSuccess());
        $this->assertInstanceOf(BlockType::class, $response->getResult());
    }

    /**
     * Test case for getLatestBlockNumber
     *
     * Get latest block number.
     */
    public function testGetLatestBlockNumber()
    {
        $response = $this->api->getLatestBlockNumber();
        $this->assertTrue($response->getSuccess());
        $this->assertGreaterThanOrEqual(0, $response->getResult());
    }

    /**
     * Test case for getPeers
     *
     * Get peers.
     */
    public function testGetPeers()
    {
        $response = $this->api->getPeers();
        $this->assertTrue($response->getSuccess());
    }

    /**
     * Test case for getPendingTransactions
     *
     * Get pending transactions.
     */
    public function testGetPendingTransactions()
    {
        $response = $this->api->getPendingTransactions();
        $this->assertTrue($response->getSuccess());
        $this->assertInternalType("array", $response->getResult());
    }

    /**
     * Test case for getTransaction
     *
     * Get transaction.
     */
    public function testGetTransaction()
    {
        $response = $this->api->getTransaction("0x6bc468aed513042efca496fec6c0dab9c17b4d50b1408c41dfc4fba1fbc11132");
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(
            "0x6bc468aed513042efca496fec6c0dab9c17b4d50b1408c41dfc4fba1fbc11132",
            $response->getResult()->getHash()
        );
    }

    /**
     * Test case for getTransactionLimits
     *
     * Get transaction limits.
     */
    public function testGetTransactionLimits()
    {
        foreach (["TRANSFER", "DELEGATE", "VOTE", "UNVOTE"] as $type) {
            $response = $this->api->getTransactionLimits($type);
            $this->assertTrue($response->getSuccess());
        }
    }

    /**
     * Test case for getValidators
     *
     * Get validators.
     */
    public function testGetValidators()
    {
        $response = $this->api->getValidators();
        $this->assertTrue($response->getSuccess());
        $this->assertEquals([DEVNET_VALIDATOR], $response->getResult());
    }

    /**
     * Test case for getVote
     *
     * Get vote.
     */
    public function testGetVote()
    {
        $response = $this->api->getVote(DEVNET_VALIDATOR, DEVNET_VALIDATOR);
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(1000000000, $response->getResult());
    }

    /**
     * Test case for getVotes
     *
     * Get votes.
     */
    public function testGetVotes()
    {
        $response = $this->api->getVotes(DEVNET_VALIDATOR);
        $this->assertTrue($response->getSuccess());
        $this->assertEquals([
            '0x23a6049381fd2cfb0661d9de206613b83d53d7df' => '1000000000'
        ], $response->getResult());
    }

    /**
     * Test case for listAccounts
     *
     * List accounts.
     */
    public function testListAccounts()
    {
        $response = $this->api->listAccounts();
        $this->assertTrue($response->getSuccess());
        $this->assertArraySubset([DEVNET_VALIDATOR], $response->getResult());
    }

    /**
     * Test case for registerDelegate
     *
     * Register delegate.
     */
    public function testRegisterDelegate()
    {
        $delegateName = array_values(unpack('H*', "voter"))[0];
        $response = $this->api->registerDelegate(
            DEVNET_VOTER,
            $delegateName,
            0.005 * SEM
        );
        $this->assertTrue($response->getSuccess());
        $this->assertRegExp(SEM_TX_ID_REGEXP, $response->getResult());
    }

    /**
     * Test case for signMessage
     *
     * Sign a message.
     */
    public function testSignMessage()
    {
        $response = $this->api->signMessage(
            DEVNET_VALIDATOR,
            "test message"
        );
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(
            SIGNATURE,
            $response->getResult()
        );
    }

    /**
     * Test case for signRawTransaction
     *
     * Sign an unsigned raw transaction.
     */
    public function testSignRawTransaction()
    {
        $response = $this->api->signRawTransaction(
            RAW_TX,
            DEVNET_VALIDATOR
        );
        $this->assertTrue($response->getSuccess());
        $this->assertEquals(
            SIGNED_RAW_TX,
            $response->getResult()
        );
    }

    /**
     * Test case for transfer
     *
     * Transfer coins.
     */
    public function testTransfer()
    {
        $response = $this->api->transfer(
            DEVNET_VALIDATOR,
            "0x0000000000000000000000000000000000000000",
            1 * SEM,
            0.005 * SEM
        );
        $this->assertTrue($response->getSuccess());
        $this->assertRegExp(SEM_TX_ID_REGEXP, $response->getResult());
    }

    /**
     * Test case for unvote
     *
     * Unvote.
     */
    public function testUnvote()
    {
        $response = $this->api->unvote(
            DEVNET_VALIDATOR,
            DEVNET_DELEGATE,
            1,
            0.005 * SEM
        );
        $this->assertTrue($response->getSuccess());
        $this->assertRegExp(SEM_TX_ID_REGEXP, $response->getResult());
    }

    /**
     * Test case for verifyMessage
     *
     * Verify a message.
     */
    public function testVerifyMessage()
    {
        $response = $this->api->verifyMessage(
            DEVNET_VALIDATOR,
            "test message",
            SIGNATURE
        );
        $this->assertTrue($response->getSuccess());
        $this->assertTrue($response->getValidSignature());
    }

    /**
     * Test case for vote
     *
     * Vote.
     */
    public function testVote()
    {
        $response = $this->api->vote(
            DEVNET_VOTER,
            DEVNET_DELEGATE,
            1,
            0.005 * SEM
        );
        $this->assertTrue($response->getSuccess());
        $this->assertRegExp(SEM_TX_ID_REGEXP, $response->getResult());
    }

    /**
     * Test case for getSyncingProgress
     */
    public function testGetSyncingProgress() {
        $response = $this->api->getSyncingProgress();
        $this->assertTrue($response->getSuccess());
        $this->assertFalse($response->getResult()->getSyncing());
        $this->assertNull($response->getResult()->getStartingHeight());
        $this->assertNull($response->getResult()->getCurrentHeight());
        $this->assertNull($response->getResult()->getTargetHeight());
    }
}
